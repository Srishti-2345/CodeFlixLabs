[{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\nint main() {\r\n    char str[1000];\r\n    int i, length, isPalindrome = 1;\r\n\r\n   \r\n    fgets(str, sizeof(str), stdin);\r\n\r\n    // Remove the newline character if present\r\n    length = strlen(str);\r\n    if (length > 0 && str[length - 1] == '\\n') {\r\n        str[length - 1] = '\\0';\r\n        length--;\r\n    }\r\n\r\n    // Compare characters from start and end\r\n    for (i = 0; i < length / 2; i++) {\r\n        if (str[i] != str[length - i - 1]) {\r\n            isPalindrome = 0;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (isPalindrome)\r\n        printf(\"Yes\");\r\n    else\r\n        printf(\"No\");\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-14T10:48:29.899Z","isCorrect":true},{"code":"#include <stdio.h>  // Required for input/output functions (printf, fgets)\r\n#include <string.h> // Required for string manipulation functions (strlen, strcspn)\r\n#include <ctype.h>  // Required for character handling functions (tolower)\r\n\r\n\r\nint isPalindrome(char *str) {\r\n    int length = strlen(str); // Get the length of the string\r\n    int i = 0;                 // Pointer from the beginning of the string\r\n    int j = length - 1;        // Pointer from the end of the string\r\n\r\n    \r\n    while (i < j) {\r\n        // Convert both characters to lowercase for case-insensitive comparison\r\n        char char_i = tolower(str[i]);\r\n        char char_j = tolower(str[j]);\r\n\r\n        // If characters at current positions do not match, it's not a palindrome\r\n        if (char_i != char_j) {\r\n            return 0; // Not a palindrome\r\n        }\r\n        i++; // Move beginning pointer forward\r\n        j--; // Move end pointer backward\r\n    }\r\n    return 1; // It's a palindrome if the loop completes\r\n}\r\n\r\nint main() {\r\n    char str[100]; // Declare a character array (string) to store the input.\r\n                   // 100 is chosen as a reasonable maximum length for the string.\r\n\r\n    \r\n    // Prompt the user to enter a string\r\nscanf(\"%[^\\n]s\",str);\r\n\r\n    // Remove the trailing newline character that fgets might add.\r\n    // strcspn finds the length of the initial segment of str which consists\r\n    // entirely of characters not in \"\\n\". If a newline is found, it returns\r\n    // its index, which we then use to place a null terminator.\r\n    \r\n\r\n    // Call the isPalindrome function and print the result\r\n    if (isPalindrome(str)) {\r\n        printf(\"Yes\\n\"); // Output 'Yes' if it's a palindrome\r\n    } else {\r\n        printf(\"No\\n\");  // Output 'No' if it's not a palindrome\r\n    }\r\n\r\n    return 0; // Indicate successful execution\r\n}\r\n","language":"c","time":"2025-05-28T18:02:22.021Z","isCorrect":true}]