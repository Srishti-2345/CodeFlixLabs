[{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\nvoid reverse(char* begin, char* end) {\r\n    char temp;\r\n    while (begin < end) {\r\n        temp = *begin;\r\n        *begin++ = *end;\r\n        *end-- = temp;\r\n    }\r\n}\r\n\r\nvoid reverseWords(char* str) {\r\n    char* word_begin = NULL;\r\n    char* temp = str;\r\n\r\n    // Reverse individual words\r\n    while (*temp) {\r\n        if ((word_begin == NULL) && (*temp != ' ')) {\r\n            word_begin = temp;\r\n        }\r\n        if (word_begin && ((*(temp + 1) == ' ') || (*(temp + 1) == '\\0'))) {\r\n            reverse(word_begin, temp);\r\n            word_begin = NULL;\r\n        }\r\n        temp++;\r\n    }\r\n\r\n    // Reverse the entire string\r\n    reverse(str, temp - 1);\r\n}\r\n\r\nint main() {\r\n    char str[1000];\r\n\r\n   \r\n    fgets(str, sizeof(str), stdin);\r\n\r\n    // Remove newline character if present\r\n    str[strcspn(str, \"\\n\")] = '\\0';\r\n\r\n    reverseWords(str);\r\n    printf(\"%s\", str);\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-14T11:17:37.034Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n#include <ctype.h>\r\n\r\nvoid reverseWord(char* start, char* end) {\r\n    char temp;\r\n    while (start < end) {\r\n        temp = *start;\r\n        *start = *end;\r\n        *end = temp;\r\n        start++;\r\n        end--;\r\n    }\r\n}\r\n\r\nvoid reverseLettersInWords(char* str) {\r\n    char* word_start = NULL;\r\n    char* temp = str;\r\n\r\n    while (*temp) {\r\n        if (word_start == NULL && !isspace(*temp)) {\r\n            word_start = temp;\r\n        }\r\n        if (word_start && (isspace(*temp) || *(temp + 1) == '\\0')) {\r\n            reverseWord(word_start, temp - 1);\r\n            word_start = NULL;\r\n        }\r\n        temp++;\r\n    }\r\n}\r\n\r\nint main() {\r\n    char str[1000];\r\n\r\n    \r\n    fgets(str, sizeof(str), stdin);\r\n\r\n    // Remove newline character if present\r\n    str[strcspn(str, \"\\n\")] = '\\0';\r\n\r\n    reverseLettersInWords(str);\r\n    printf(\"%s\", str);\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-14T11:20:04.753Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\nvoid reverseWord(char* start, char* end) {\r\n    char temp;\r\n    while (start < end) {\r\n        temp = *start;\r\n        *start = *end;\r\n        *end = temp;\r\n        start++;\r\n        end--;\r\n    }\r\n}\r\n\r\nvoid reverseLettersInWords(char* str) {\r\n    char* word_start = NULL;\r\n    char* temp = str;\r\n\r\n    while (*temp) {\r\n        // If we encounter a non-space character, mark the beginning of a word\r\n        if (word_start == NULL && *temp != ' ') {\r\n            word_start = temp;\r\n        }\r\n\r\n        // If we encounter a space or the end of the string, reverse the word\r\n        if (word_start && (*temp == ' ' || *(temp + 1) == '\\0')) {\r\n            reverseWord(word_start, temp - 1);\r\n            word_start = NULL;\r\n        }\r\n        temp++;\r\n    }\r\n}\r\n\r\nint main() {\r\n    char str[1000];\r\n\r\n    \r\n    fgets(str, sizeof(str), stdin);\r\n\r\n    // Remove newline character if present\r\n    str[strcspn(str, \"\\n\")] = '\\0';\r\n\r\n    reverseLettersInWords(str);\r\n    printf(\"%s\", str);\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-14T11:22:12.135Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Function to reverse a substring\r\nvoid reverse(char* start, char* end) {\r\n    while (start < end) {\r\n        char temp = *start;\r\n        *start = *end;\r\n        *end = temp;\r\n        start++;\r\n        end--;\r\n    }\r\n}\r\n\r\nint main() {\r\n    char str[1000]; // Assuming a maximum string length of 999 characters + null terminator\r\n\r\n    // Read the entire line including spaces\r\n    scanf(\"%[^\\n]\",str);\r\n\r\n    char* word_start = str;\r\n    char* current = str;\r\n\r\n    while (*current) {\r\n        // Find the start of a word\r\n        if (*current != ' ' && (current == str || *(current - 1) == ' ')) {\r\n            word_start = current;\r\n        }\r\n\r\n        // Find the end of a word (or the end of the string)\r\n        if (*current != ' ' && (*(current + 1) == ' ' || *(current + 1) == '\\0')) {\r\n            // Reverse the current word\r\n            reverse(word_start, current);\r\n        }\r\n        current++;\r\n    }\r\n\r\n    // Output the modified string\r\n    printf(\"%s\\n\", str);\r\n\r\n    return 0;\r\n}","language":"c","time":"2025-05-28T18:51:56.411Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Function to reverse a substring\r\nvoid reverse(char* start, char* end) {\r\n    while (start < end) {\r\n        char temp = *start;\r\n        *start = *end;\r\n        *end = temp;\r\n        start++;\r\n        end--;\r\n    }\r\n}\r\n\r\nint main() {\r\n    char str[1000]; // Assuming a maximum string length of 999 characters + null terminator\r\n\r\n    // Read the entire line including spaces\r\n    scanf(\"%[^\\n]\",str);\r\n\r\n    char* word_start = str;\r\n    char* current = str;\r\n\r\n    while (*current) {\r\n        // Find the start of a word\r\n        if (*current != ' ' && (current == str || *(current - 1) == ' ')) {\r\n            word_start = current;\r\n        }\r\n\r\n        // Find the end of a word (or the end of the string)\r\n        if (*current != ' ' && (*(current + 1) == ' ' || *(current + 1) == '\\0')) {\r\n            // Reverse the current word\r\n            reverse(word_start, current);\r\n        }\r\n        current++;\r\n    }\r\n\r\n    // Output the modified string\r\n    if (str==\"\\0\"){\r\n        printf(\" \");\r\n    }\r\n    else{printf(\"%s\\n\", str);}\r\n\r\n    return 0;\r\n}","language":"c","time":"2025-05-28T18:54:51.852Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Function to reverse a substring\r\nvoid reverse(char* start, char* end) {\r\n    while (start < end) {\r\n        char temp = *start;\r\n        *start = *end;\r\n        *end = temp;\r\n        start++;\r\n        end--;\r\n    }\r\n}\r\n\r\nint main() {\r\n    char str[1000]; // Assuming a maximum string length of 999 characters + null terminator\r\n\r\n    // Read the entire line including spaces\r\n    scanf(\"%[^\\n]\",str);\r\n\r\n    char* word_start = str;\r\n    char* current = str;\r\n\r\n    while (*current) {\r\n        // Find the start of a word\r\n        if (*current != ' ' && (current == str || *(current - 1) == ' ')) {\r\n            word_start = current;\r\n        }\r\n\r\n        // Find the end of a word (or the end of the string)\r\n        if (*current != ' ' && (*(current + 1) == ' ' || *(current + 1) == '\\0')) {\r\n            // Reverse the current word\r\n            reverse(word_start, current);\r\n        }\r\n        current++;\r\n    }\r\n\r\n    // Output the modified string\r\n    if (str[0]==\"\\0\"){\r\n        printf(\" \");\r\n    }\r\n    else{printf(\"%s\\n\", str);}\r\n\r\n    return 0;\r\n}","language":"c","time":"2025-05-28T18:56:18.140Z","isCorrect":false}]