[{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Function to expand around the center and return the length of the palindrome\r\nint expandAroundCenter(const char* s, int left, int right) {\r\n    while (left >= 0 && s[right] != '\\0' && s[left] == s[right]) {\r\n        left--;\r\n        right++;\r\n    }\r\n    return right - left - 1;\r\n}\r\n\r\n// Function to find the longest palindromic substring\r\nvoid longestPalindrome(const char* s, char* result) {\r\n    int start = 0, end = 0;\r\n    int len = strlen(s);\r\n\r\n    for (int i = 0; i < len; i++) {\r\n        int len1 = expandAroundCenter(s, i, i);       // Odd length palindrome\r\n        int len2 = expandAroundCenter(s, i, i + 1);   // Even length palindrome\r\n        int maxLen = (len1 > len2) ? len1 : len2;\r\n\r\n        if (maxLen > end - start) {\r\n            start = i - (maxLen - 1) / 2;\r\n            end = i + maxLen / 2;\r\n        }\r\n    }\r\n\r\n    // Extract the longest palindrome substring\r\n    int resultLen = end - start + 1;\r\n    strncpy(result, s + start, resultLen);\r\n    result[resultLen] = '\\0';  // Null-terminate the result string\r\n}\r\n\r\nint main() {\r\n    char str[1000];\r\n    char result[1000];\r\n\r\n    \r\n    if (fgets(str, sizeof(str), stdin) != NULL) {\r\n        // Remove the trailing newline character if present\r\n        size_t len = strlen(str);\r\n        if (len > 0 && str[len - 1] == '\\n') {\r\n            str[len - 1] = '\\0';\r\n        }\r\n\r\n        longestPalindrome(str, result);\r\n        printf(\"%s\", result);\r\n    } else {\r\n        printf(\"Error reading input.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-15T07:44:10.990Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Function to expand around the center and return the length of the palindrome\r\nint expandAroundCenter(const char* s, int left, int right) {\r\n    while (left >= 0 && s[right] != '\\0' && s[left] == s[right]) {\r\n        left--;\r\n        right++;\r\n    }\r\n    return right - left - 1;\r\n}\r\n\r\n// Function to find the longest palindromic substring\r\nvoid longestPalindrome(const char* s, char* result) {\r\n    int start = 0, end = 0;\r\n    int len = strlen(s);\r\n\r\n    for (int i = 0; i < len; i++) {\r\n        int len1 = expandAroundCenter(s, i, i);       // Odd length palindrome\r\n        int len2 = expandAroundCenter(s, i, i + 1);   // Even length palindrome\r\n        int maxLen = (len1 > len2) ? len1 : len2;\r\n\r\n        // Prioritize the first occurring palindrome in case of equal length\r\n        if (maxLen > end - start) {\r\n            start = i - (maxLen - 1) / 2;\r\n            end = i + maxLen / 2;\r\n        }\r\n    }\r\n\r\n    // Extract the longest palindrome substring\r\n    int resultLen = end - start + 1;\r\n    strncpy(result, s + start, resultLen);\r\n    result[resultLen] = '\\0';  // Null-terminate the result string\r\n}\r\n\r\nint main() {\r\n    char str[1000];\r\n    char result[1000];\r\n\r\n    \r\n    if (fgets(str, sizeof(str), stdin) != NULL) {\r\n        // Remove the trailing newline character if present\r\n        size_t len = strlen(str);\r\n        if (len > 0 && str[len - 1] == '\\n') {\r\n            str[len - 1] = '\\0';\r\n        }\r\n\r\n        longestPalindrome(str, result);\r\n        printf(\"%s\", result);\r\n    } else {\r\n        printf(\"Error reading input.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-15T07:46:35.313Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n\r\n// Function to expand around the center and return the length of the palindrome\r\nint expandAroundCenter(const char* s, int left, int right) {\r\n    while (left >= 0 && s[right] != '\\0' && s[left] == s[right]) {\r\n        left--;\r\n        right++;\r\n    }\r\n    return right - left - 1;\r\n}\r\n\r\n// Function to find the longest palindromic substring\r\nvoid longestPalindrome(const char* s, char* result) {\r\n    int start = 0, end = 0;\r\n    int len = strlen(s);\r\n    int maxLen = 0;\r\n\r\n    for (int i = 0; i < len; i++) {\r\n        // Check odd length palindrome\r\n        int len1 = expandAroundCenter(s, i, i);\r\n        if (len1 > maxLen) {\r\n            maxLen = len1;\r\n            start = i - (len1 - 1) / 2;\r\n            end = i + (len1 - 1) / 2;\r\n        }\r\n\r\n        // Check even length palindrome\r\n        int len2 = expandAroundCenter(s, i, i + 1);\r\n        if (len2 > maxLen) {\r\n            maxLen = len2;\r\n            start = i - (len2 - 1) / 2;\r\n            end = i + (len2 - 1) / 2;\r\n        }\r\n    }\r\n\r\n    // Extract the longest palindrome substring\r\n    int resultLen = end - start + 1;\r\n    strncpy(result, s + start, resultLen);\r\n    result[resultLen] = '\\0';  // Null-terminate the result string\r\n}\r\n\r\nint main() {\r\n    char str[1000];\r\n    char result[1000];\r\n\r\n \r\n    if (fgets(str, sizeof(str), stdin) != NULL) {\r\n        // Remove the trailing newline character if present\r\n        size_t len = strlen(str);\r\n        if (len > 0 && str[len - 1] == '\\n') {\r\n            str[len - 1] = '\\0';\r\n        }\r\n\r\n        longestPalindrome(str, result);\r\n        printf(\"%s\", result);\r\n    } else {\r\n        printf(\"Error reading input.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-15T07:50:20.657Z","isCorrect":false}]