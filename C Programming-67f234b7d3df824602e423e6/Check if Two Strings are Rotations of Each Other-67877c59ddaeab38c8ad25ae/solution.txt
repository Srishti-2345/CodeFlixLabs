[{"code":"#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n\r\n// Function to remove the trailing newline character from a string\r\nvoid remove_newline(char *str) {\r\n    size_t len = strlen(str);\r\n    if(len > 0 && str[len - 1] == '\\n') {\r\n        str[len - 1] = '\\0';\r\n    }\r\n}\r\n\r\n// Function to check if s2 is a rotation of s1\r\nint areRotations(const char* s1, const char* s2) {\r\n    int len1 = strlen(s1);\r\n    int len2 = strlen(s2);\r\n\r\n    // Check if lengths are equal\r\n    if (len1 != len2) {\r\n        return 0;\r\n    }\r\n\r\n    // Create a temporary string to store s1 concatenated with itself\r\n    char* temp = (char*)malloc((2 * len1 + 1) * sizeof(char));\r\n    if (temp == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 0;\r\n    }\r\n\r\n    strcpy(temp, s1);\r\n    strcat(temp, s1);\r\n\r\n    // Check if s2 is a substring of the concatenated string\r\n    int result = (strstr(temp, s2) != NULL);\r\n\r\n    // Free the allocated memory\r\n    free(temp);\r\n\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    char str1[100];\r\n    char str2[100];\r\n\r\n    printf(\"Enter the first string: \");\r\n    if (fgets(str1, sizeof(str1), stdin) == NULL) {\r\n        printf(\"Error reading input.\\n\");\r\n        return 1;\r\n    }\r\n    remove_newline(str1); // Remove trailing newline\r\n\r\n    printf(\"Enter the second string: \");\r\n    if (fgets(str2, sizeof(str2), stdin) == NULL) {\r\n        printf(\"Error reading input.\\n\");\r\n        return 1;\r\n    }\r\n    remove_newline(str2); // Remove trailing newline\r\n\r\n    if (areRotations(str1, str2)) {\r\n        printf(\"Yes\");\r\n    } else {\r\n        printf(\"No\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-15T07:36:45.845Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n\r\n// Function to remove the trailing newline character from a string\r\nvoid remove_newline(char *str) {\r\n    size_t len = strlen(str);\r\n    if(len > 0 && str[len - 1] == '\\n') {\r\n        str[len - 1] = '\\0';\r\n    }\r\n}\r\n\r\n// Function to check if s2 is a rotation of s1\r\nint areRotations(const char* s1, const char* s2) {\r\n    int len1 = strlen(s1);\r\n    int len2 = strlen(s2);\r\n\r\n    // Check if lengths are equal\r\n    if (len1 != len2) {\r\n        return 0;\r\n    }\r\n\r\n    // Create a temporary string to store s1 concatenated with itself\r\n    char* temp = (char*)malloc((2 * len1 + 1) * sizeof(char));\r\n    if (temp == NULL) {\r\n        printf(\"Memory allocation failed.\\n\");\r\n        return 0;\r\n    }\r\n\r\n    strcpy(temp, s1);\r\n    strcat(temp, s1);\r\n\r\n    // Check if s2 is a substring of the concatenated string\r\n    int result = (strstr(temp, s2) != NULL);\r\n\r\n    // Free the allocated memory\r\n    free(temp);\r\n\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    char str1[100];\r\n    char str2[100];\r\n\r\n    \r\n    if (fgets(str1, sizeof(str1), stdin) == NULL) {\r\n        printf(\"Error reading input.\\n\");\r\n        return 1;\r\n    }\r\n    remove_newline(str1); // Remove trailing newline\r\n\r\n    \r\n    if (fgets(str2, sizeof(str2), stdin) == NULL) {\r\n        printf(\"Error reading input.\\n\");\r\n        return 1;\r\n    }\r\n    remove_newline(str2); // Remove trailing newline\r\n\r\n    if (areRotations(str1, str2)) {\r\n        printf(\"Yes\");\r\n    } else {\r\n        printf(\"No\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-15T07:37:20.838Z","isCorrect":true}]