[{"code":"#include<stdio.h>\r\n\r\nvoid findFrequency(int arr[], int n) { int visited[n]; for (int i = 0; i < n; i++) { visited[i] = 0; }\r\n\r\nint max=0;\r\nint frequency=0;\r\n\r\nfor (int i = 0; i < n; i++) {\r\n    if (visited[i] == 1)\r\n        continue;\r\n    \r\n    int count = 1;\r\n    for (int j = i + 1; j < n; j++) {\r\n        if (arr[i] == arr[j]) {\r\n            count++;\r\n            if(count>n/2){\r\n                max=arr[i];\r\n            }\r\n            \r\n            }else{\r\n                max=-1;\r\n            }\r\n            visited[j] = 1;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n printf(\"%d\",max);\r\n\r\n}\r\n\r\nint main() { int n; scanf(\"%d\", &n);\r\n\r\nint arr[n];\r\n\r\nfor (int i = 0; i < n; i++) {\r\n    scanf(\"%d\", &arr[i]);\r\n}\r\n\r\nfindFrequency(arr, n);\r\n\r\nreturn 0;\r\n\r\n}","language":"c","time":"2025-05-14T18:25:04.187Z","isCorrect":false},{"code":"#include<stdio.h>\r\n\r\nvoid findFrequency(int arr[], int n) { int visited[n]; for (int i = 0; i < n; i++) { visited[i] = 0; }\r\n\r\nint max=0;\r\nint frequency=0;\r\n\r\nfor (int i = 0; i < n; i++) {\r\n    if (visited[i] == 1)\r\n        continue;\r\n    \r\n    int count = 1;\r\n    for (int j = i + 1; j < n; j++) {\r\n        if (arr[i] == arr[j]) {\r\n            count++;\r\n            if(count>n/2){\r\n                max=arr[i];\r\n            }\r\n            \r\n            }else{\r\n                max=-1;\r\n            }\r\n            visited[j] = 1;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n printf(\"%d\",max);\r\n\r\n}\r\n\r\nint main() { int n; scanf(\"%d\", &n);\r\n\r\nint arr[n];\r\n\r\nfor (int i = 0; i < n; i++) {\r\n    scanf(\"%d\", &arr[i]);\r\n}\r\n\r\nfindFrequency(arr, n);\r\n\r\nreturn 0;\r\n\r\n}","language":"c","time":"2025-05-14T18:25:08.366Z","isCorrect":false},{"code":"#include <stdio.h>\r\n\r\nint findMajorityElement(int arr[], int n) {\r\n    int candidate = -1, count = 0;\r\n\r\n    // Step 1: Find candidate using Boyer-Moore Voting Algorithm\r\n    for (int i = 0; i < n; i++) {\r\n        if (count == 0) {\r\n            candidate = arr[i];\r\n            count = 1;\r\n        } else if (arr[i] == candidate) {\r\n            count++;\r\n        } else {\r\n            count--;\r\n        }\r\n    }\r\n\r\n    // Step 2: Verify if candidate is actually the majority element\r\n    count = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        if (arr[i] == candidate) {\r\n            count++;\r\n        }\r\n    }\r\n\r\n    if (count > n / 2) {\r\n        return candidate;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nint main() {\r\n    int n;\r\n    scanf(\"%d\", &n);\r\n\r\n    int arr[n];\r\n    for (int i = 0; i < n; i++) {\r\n        scanf(\"%d\", &arr[i]);\r\n    }\r\n\r\n    int result = findMajorityElement(arr, n);\r\n    printf(\"%d\\n\", result);\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-05-28T10:18:02.364Z","isCorrect":true}]